最近的一个面试，面试官问到了关于AMD和CMD的问题，之前看书的时候都没有仔细深入。今天整理一下，先有一个大致的了解。
CommonJS是服务器端模块的规范，nodejs采用的就是这个规范。
根据commonjs规范，一个单独的文件就是一个模块，加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的exports对象。
foo.js
function foobar(){…}
var foobar=new foobar();
exports.foobar=foobar;

//通过require方法引用
var test=require(‘./foobar’).foobar;
test…

CommonJS加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，
不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD  CMD 解决方案。

AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。
CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。
1.AMD
AMD是requireJS在推广过程中对模块定义的规范化产出。AMD是一个在浏览器daunt模块化开发的规范。
AMD是异步加载模块。它的模块支持对象、函数、构造器、字符串、JSON等各种类型的模块。
适用AMD规范适用define方法定义模块。
//通过数组引入依赖 ，回调函数通过形参传入依赖
define(['someModule1', ‘someModule2’], function (someModule1, someModule2) {
    function foo () {
        /// someing
        someModule1.test();
    }
    return {foo: foo}
});
AMD规范允许输出模块兼容CommonJS规范，这时define方法如下：
define(function (require, exports, module) {
    var reqModule = require("./someModule");
    requModule.test();
    exports.asplode = function () {
        //someing
    }
});
##RequireJS
config方法，用来配置require.js运行参数。config方法接受一个对象作为参数。
paths参数指定各个模块的位置。这个位置可以是同一个服务器上的相对位置，也可以是外部网址。可以为每个模块定义多个位置，如果第一个位置加载失败，则加载第二个位置。
baseUrl参数指定本地模块位置的基准目录，即本地模块的路径是相对于哪个目录的。该属性通常有require.js加载时的data-main属性指定。
shim 有些库不是AMD兼容的，这时就需要指定shim属性的值。shim可以理解成“垫片”，用来帮助require.js加载非AMD规范的库。
require.config({
	paths:{
		"backbone":"vendor/backbone",
		"underscore":"vendor/underscore"
	},
	shim:{
		"backbone": {
            deps: [ "underscore" ],
            exports: "Backbone"
        },
        "underscore": {
            exports: "_"
        }
	}
});
RequireJS主要解决两个问题：
a.多个js文件可能存在依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器。
b.js加载的时候浏览器回停止页面渲染，加载文件越多，页面失去响应时间越长。
2.CMD
CMD是SeaJS在推广过程中对模块定义的规范化产出。
在CMD规范中，一个模块就是一个文件。
define(factory)
define是一个全局函数，用来定义模块。factory为对象字符串时，表示模块的接口就是该对象、字符串。比如可以顶一个json数据模块。define({“foo”:”bar”})。factory为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory方法在执行时，默认会传入三个参数：require、exports、module。
define(function(require,exports,module){…});
require是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口。

###### CMD和AMD的区别 ######
1.对于依赖的模块AMD是提前执行，CMD是延迟执行。不过Require2.0开始，也改成可以延迟执行。
2.CMD推崇依赖就近，AMD推崇依赖前置。
//AMD
define([‘./a’,’./b’], function(a,b){
  //依赖一开始就写好
  a.test();
  b.test();
});
//CMD
define(function(require, exports, module){
  //依赖可以就近书写
var a=require(‘./a’);
  a.test();
  …
  //软依赖
  if(status){
var b=require(‘./b’);
b.test();
}
});
3.AMD的api默认是一个当多个用，CMD严格的区分推崇职责单一。例如：AMD里require分全局的和局部的。CMD里面没有全局的 require,提供 seajs.use()来实现模块系统的加载启动。CMD里每个API都简单纯粹。

###### SeaJS与requireJS异同 ######
相同之处：RequireJS和Sea.js都是模块加载器，倡导模块化开发理念，核心价值是让JavaScript的模块化开发变得简单自然。
不同之处：
1.定位有差异。RequireJS想成为浏览器的模块加载器，同时也想成为Rhino/Node等环境的模块加载器。Sea.js则专注于web浏览器端，同时通过node扩展的方式可以很方便的跑在node环境中。
2.遵循的规范不同。RequireJS遵循AMD规范，Sea.js遵循CMD规范。规范的不同，导致两者的api不同。sea.js更贴近commonjs moudles/1.1和node modules规范。
3.推广理念有差异。requireJS在尝试让第三方库修改自身来支持requirejs,目前只有少数社区采纳。Sea.js 不强推，采用自主封装的方式来“海纳百川”，目前已有较成熟的封装策略。
4.对开发调试的支持有差异。Sea.js 非常关注代码的开发调试，有 nocache、debug 等用于调试的插件。RequireJS 无这方面的明显支持。
5.插件机制不同。RequireJS采取的是在源码中预留接口的形式，插件类型比较单一。Sea,js采取的时通用事件机制，插件类型更丰富。
